use "obj";
use "controls";
use "Cycle";
use "Feature";

/*
    Calculates the absolute (positive) of the given number and returns it.

    Example:
    [code]
    Abs(100)    // returns 100
    Abs(-100)   // returns 100
    [/code]
 */
public int Abs(int value)
{}

/*
    
 */


/*
    Adds node to the specified list after the node pointed to by nodeAfter.
    
    See also:
    <AddToFront>, <AddToEnd>, <FindKey>, <DeleteKey>
 */
public k_node AddAfter(k_list list, k_node nodeAfter, k_node node)
{
}

/*
	Adds a new menu item with the specified caption to the menubar.
	The string itemCaptions specifies the submenu items.
	The itemCaptions string can contain format characters to seperate items and format the text.    
	
	Format Characters:
	` - Tells the interpreter to right justify the following text
	: - Specifies the end of current item, the following will be the next item.
	--! - Specifies that the menu item will just be a seperator.
	# - Specifies the item's function key.
	^ - Specifies the item's control+key combination.
	
	Example:
	[code]
	AddMenu(
		" File "
	    "Restart Game`#9:"+
	    "Save Game`#5:"+
	    "Restore Game`#7:"+
	    "--! :"+
	    "Quit`^q"
	)
	[/code]
 */
public void AddMenu(string caption, string itemCaptions)
{
}

/*
    Adds node to the end of the specified list.
    
    See also:
    <AddToFront>, <AddAfter>, <FindKey>, <DeleteKey>
 */
public void AddToEnd(k_list list, k_node node)
{
}

/*
    Adds node to the front of the specified list.
    
    See Also:
    <AddAfter>, <AddToEnd>, <FindKey>, <DeleteKey>
 */
public void AddToFront(k_list list, k_node node)
{
}

/*
    Draws the views contained in the viewList directly onto the picture
    as if they were originally part of the picture.
    They will stay there until the picture is discarded.

	Remarks:
	In general, this should not be used. <View.addToPic> should be called on the individual views instead.
	It will allow keeping the proper state across game save and restore.
    
    See Also:
    <View.addToPic>
 */
public void AddToPic(k_list pList)
{
}

/*
   	Draws the background picture and foreground views.
   	 
	If the background picture has not yet been drawn, it executes it's
	opening animation specified in the <DrawPic> kernel call.
	If specified, it draws the views in the cast list on the foreground.
	
	If the cycle property is specified, and true, it cycles the views as well, calling their doit() method.
 */
public
void Animate(k_list listCast, bool cycle)
void Animate(k_list pListCast)
void Animate()
{
}

/*
	Reads the views properties and generates it's bounding rectangle, storing
	it in the brLeft, brRight, brTop and brBottom properties.
	This rectangle is used for things such as collision detection.
	
	See Also:
	<View>
 */
public void BaseSetter(View view)
{
}


/*
	Checks the view to see if it is allows to be at it's current coordinates on the screen.
	
	Remarks:
	This is used in the class system when the object moves.
	If it can't be where it is, it sets it to it's previous coordinates.
	If castList is specified, it checks the viewObj against the objects in the list
	to see if it can be where it is. 

	Returns:
	It returns true if it can be where it is, false otherwise.
 */
public
bool CanBeHere(View view)
bool CanBeHere(View view, k_list castList)
{
}

/*
	Returns the height of a cel, specified by view, loop and cel.
 */
public int CelHigh(int view, int loop, int cel)
{
}

/*
	Returns the width of a cel, specified by view, loop and cel.
 */
public int CelWide(int view, int loop, int cel)
{
}

/*
	Checks if there would be enough space on the specified directory's disk to save the current game.
	
	Returns:
	true if there is, false if not.
 */
public bool CheckFreeSpace(string directory)
{
}

/*
	Checks to see if a particular saved game can be loaded.
	
	Parameters:
	gameName - the user-specified name of the game.
	slotNumber - the game slot.
	gameVersion - optional parameter.
	
	Remarks:
	This makes sure the saved game exists, is valid, and matches the gameName and gameVersion.

	Returns:
	true on success, false on fail.
 */
public
bool CheckSaveGame(string gameName, int slotNumber)
bool CheckSaveGame(string gameName, int slotNumber, string gameVersion)
{
}

/*
	Creates a new instance of a class or object and returns a pointer to it.

	Example:
	[code]
	Event newEvent;
	newEvent = Clone(Event); 	// create an instance of Event and stores the pointer into newEvent
	GetEvent($7FFF newEvent); 	// use the instance
	DisposeClone(Event) 		// dispose of the instance
	[/code]
 */
public Obj Clone(Obj object)
{
}

/*
	Returns the priority number at row y.
 */
public int CoordPri(int y)
{
}

/*
	Returns the factor divided by the cosine of angle * PI / 180.0.
	
	See Also:
	<CosMult>, <SinDiv>, <SinMult>
 */
public int CosDiv(int angle, int factor)
{
}

/*
	Returns the cosine of angle * PI / 180.0 multiplied by factor.
	
	See Also:
	<CosDiv>, <SinDiv>, <SinMult>
 */
public int CosMult(int angle, int factor)
{
}

/*
	Finds the node with the specified key in list and deletes it.
	Returns true if the node was deleted.
	
    See also:
    <AddToFront>, <AddToEnd>, <AddAfter>, <FindKey>
 */
public bool DeleteKey(k_list list, int key)
{
}

/*
	Retrieves information about the computer's devices.
	
	It contains five subfunctions. Each function is accessed by specifying its identifier as the first parameter.

	string DeviceInfo(int diGET_DEVICE, string thePath, string outBuffer):
		Obtains the drive letter from a directory string.
		It evaluates the specified path and writes it's drive letter to strBuf.
		It also returns a pointer to the end of strBuf (the index of the NULL terminating character).
		
	Example:
	[code]
	char strBuf[3];
	DeviceInfo(diGET_DEVICE "C:\scistudio" @strBuf);
	Print(@strBuf); // Prints "C:"
	[/code]
	
	string DeviceInfo(int diGET_CURRENT_DEVICE, string thePath, string outBuffer):
		Obtains the drive letter the current path and and writes it to strBuf.
		It also returns a pointer to the end of strBuf (the index of the NULL terminating character).
		
	Example:
	[code]
	char strBuf[3];
	DeviceInfo(diGET_CURRENT_DEVICE @strBuf);
	Print(@strBuf); // Prints "C:", "D:", or whatever the current drive is
	[/code]

	bool DeviceInfo(int diPATHS_EQUAL, string path1, string path2):
	Compares path1 and path2. If they both point to the same physical location, it returns true, otherwise, false. 

	Example:
	[code]
	char aPath[100];
	if (DeviceInfo(diPATHS_EQUAL @aPath "C:\scistudio"))
	{
	    Print("The paths are equal");
	} 
	[/code]
	
	bool DeviceInfo(int diIS_FLOPPY, string thePath):
	Checks the specified drive letter to see if it's a floppy or not, returning true or false.

	[code]
	DeviceInfo(diIS_FLOPPY "A:") // returns true
	DeviceInfo(diIS_FLOPPY "C:") // returns false
	[/code]

	void DeviceInfo(int command):
	It is unknown what this does.

	[code]
	DeviceInfo(4);
	[/code]

 */
public
var DeviceInfo(int command, string thePath, string outBuffer)
bool DeviceInfo(int command, string thePath)
void DeviceInfo(int command)
void DeviceInfo(string outBuffer)
{
}

/*
	Reads angle property and figures out which loop goes with it 
	(i.e. if it's east, cel 0 is used).
	It then sets the loop selector of the object.
 */
public void DirLoop(View view, int angle)
{
}

/*
	Displays the specified text to the screen.
	
	Following the text, you can specify how the string is displayed or handled with parameters.
	Each parameter has a type ID, specified in sci.shp.
	
	Allowed parameters:
	dsCOORD - 2 parameters: (x, y) coordinates at which to display the text.
	dsALIGN - 1 parameter: alRIGHT, alLEFT or alCENTER.
	dsCOLOUR - 1 parameter: set the colour.
	dsBACKGROUND - 1 parameter: set the background colour. -1 will use a transparent background.
	dsDISABLED - 1 parameter: set the disabled (grey) flag. 1 will draw disabled text.
	dsFONT - 1 parameter: the resource number of the font to use.
	dsWIDTH - 1 parameter: the width to wrap the text.
	dsSAVEPIXELS - no parameters: set the "save under" flag to save a copy of the pixels before
		writing the text. The handle to the saved pixels is returned.
	dsRESTOREPIXELS - 1 parameter: handle to the saved pixels. With this command, the text and
		all the other parameters are ignored.

	Examples:
	[code]
	Display("Hello World");

	Display(
	    "Hello World"
	    dsCOORD 60 80
	    dsCOLOUR clRED
	    dsBACKGROUND clYELLOW
	    dsFONT 4
	    dsALIGN alCENTER
	    dsWIDTH 200
	); 
	[/code]
 */
public void Display(string text, ...)
//handle Display(string text, ...)
{
}

/*
	Unloads an instance created by Clone() from memory.
	
	See Also:
	<Clone>
*/
public void DisposeClone(Obj object)
{
}

/*
	Disposes the list.
	
	See Also:
	<NewList>
 */
public void DisposeList(k_list list)
{
}

/*
	Unloads a script from memory, including all it's classes, instances, variables, etc.
 */
public void DisposeScript(int scriptNum)
{
}

/*
	Discards the specified window object and frees it from memory.
 */
public void DisposeWindow(k_window window)
{
}

/*
	Sets the specified object's direction according to the angle and checks it's onControl() method.
	
	Remarks:
	This does not exist in early or later versions of SCI, so should be used with caution. If the game is running on an incorrect interpreter, you'll have trouble.

	See Also:
	<DoBresen>
 */
public void DoAvoider(Motion mover)
{
}

/*
	Moves the object linked to the moverObj along the path generated by <InitBresen>.
	It returns true if the move was successful, false if there was a collision.
	
	See Also:
	<InitBresen>
 */
public bool DoBresen(Motion mover)
{
}


public var DoSound(int subFunction, ...)
{
}

/*
	This draws the specified cel at the specified position with the specified priority.
	
	The priority specifies if the view is drawn in front of or behind other objects.
 */
public void DrawCel(int view, int loop, int cel, int x, int y, int priority)
{
}

/*
	Draws the specified control object to the screen.
	Its properties tell where it should go and how it should behave..
	
	See Also:
	<HiliteControl>, <EditControl>
 */
public void DrawControl(Control control)
{
}

/*
	Draws or hides the menubar. If mode is true, the menubar is drawn, otherwise it is made invisible.
	
	See Also:
	<DrawStatus>
 */
public void DrawMenuBar(bool mode)
{
}


/*
	Draws a picture on the screen. The last three parameters are optional.
	If specified, they can define how the picture is displayed.
	If unspecified, the last used (or default) parameters are used.

	Parameters:
	picNum - The number of the pic resource that should be drawn
	animation - A value indicating the type of animation
	clear - If the clear flag is set, the screen will be cleared before drawing the picture. 
	defaultPalette - specifies the default palette to be used for drawing it (0-3).
				 The palettes are contained in the pic files and can be edited with SCI Studio's picture editor.
				 This is useful for displaying your picture in day/night colours.

	clear:
	The flag's values are
	
	dpCLEAR - Clear the screen before drawing
	dpNOCLEAR - Don't clear the screen before drawing

	animation:
	The animation is executed when the <Animate> kernel is called.
	It can be set to one of the following values.
	
	dpOPEN_INSTANTLY 		- display instantly
	dpOPEN_HCENTER 			- horizontally open from center
	dpOPEN_VCENTER 			- vertically open from center
	dpOPEN_RIGHT 			- open from right
	dpOPEN_LEFT 			- open from left
	dpOPEN_BOTTOM 			- open from bottom
	dpOPEN_TOP 				- open from top
	dpOPEN_EDGECENTER 		- open from edges to center
	dpOPEN_CENTEREDGE 		- open from center to edges
	dpOPEN_CHECKBOARD 		- open random checkerboard
	dpCLOSEREOPEN_HCENTER 	- horizontally close to center, reopen from center
	dpCLOSEREOPEN_VCENTER 	- vertically close to center, reopen from center 
	dpCLOSEREOPEN_RIGHT 	- close to right, reopen from right 
	dpCLOSEREOPEN_LEFT 		- close to left, reopen from left 
	dpCLOSEREOPEN_BOTTOM 	- close to bottom, reopen from bottom
	dpCLOSEREOPEN_TOP 		- close to top, reopen from top 
	dpCLOSEREOPEN_EDGECENTER 	- close from center to edges, reopen from edges to center 
	dpCLOSEREOPEN_CENTEREDGE 	- close from edges to center, reopen from center to edges
	dpCLOSEREOPEN_CHECKBOARD 	- close random checkboard, reopen 
	
	

    Example:
    [code]
	DrawPic(100 dpCLOSEREOPEN_EDGECENTER dpCLEAR 1)
    [/code]
 */
public void DrawPic(int picNum, int animation, bool clear, int defaultPalette)
//void DrawPic(int picNum, int animation, bool clear)
//void DrawPic(int picNum, int animation)
//void DrawPic(int picNum)
{
}

/*
	Draws the specified text on the status bar.

	Example:
	DrawStatus(" Score 0 of 100                   Awesome Quest ");
 */
public void DrawStatus(string text)
{
}

/*
	By specifying an edit control object and an event object,
	it will handle everything related to the edit control,
	 such as letting the user enter text.
	 
	The event object is then updated accordingly.
	
	See Also:
	<DrawControl>, <HiliteControl>
 */
public void EditControl(Control control, Event event)
{
}

public bool EmptyList(k_list pList)
{
}

public void FClose(int handle)
{
}

public int FGets(string buffer, int max [, int handle])
{
}

/*
	Finds the node with the specified key in list and returns it.
	
	Returns:
	The node with the specified key, or null if it can not be found.
	
    
    See also:
    <AddToFront>, <AddToEnd>, <AddAfter>, <DeleteKey>
 */
public k_node FindKey(k_list list, int key)
{
}

public k_node FirstNode(k_list pList)
{
}

public void FlushResources(int scriptNumber)
{
}

public
int FOpen(string filename)
int FOpen(string filename, int mode)
{
}

public
string Format(string destString, string fmtString, ...)
string Format(string destString, uint resourceNumber, uint textId, ...)
{
}

public void FPuts(int handler, string buffer)
{
}

public bool GameIsRestarting([bool fRestarting])
{
}

public int GetAngle(int x1, int y1, int x2, int y2)
{
}

public string GetCWD(string buffer)
{
}

public int GetDistance(int x1, int y1, int x2, int y2 [, int picAngle])
{
}

public bool GetEvent(int types, Event event)
{
}

public string GetFarText(int resourceNum, int index, string buffer)
{
}

public var GetMenu(int menuItem, int subFunction)
{
}

public k_window GetPort()
{
}

public string GetSaveDir()
{
}

public int GetSaveFiles(string gameName, string descBuffer, var descSlots)
{
}

public
int GetTime()
int GetTime(bool fTimeOfDay)
{
}

public void GlobalToLocal(Event event)
{
}

public var Graph(int subFunction, ...)
{
}

public bool HaveMouse()
{
}

public void HiliteControl(Control control)
{
}

public void InitBresen(Motion mover)
//void InitBresen(Motion mover, int stepMult)
{
}

public void InspectObj(Obj obj)
{
}

public bool IsObject(var obj)
{
}

public int Joystick(int subFunction, int state)
{
}

public k_node LastNode(k_list pList)
{
}

public var Load(int resourceType, int resourceNumber)
{
}

public void LocalToGlobal(Event event)
{
}

public Event MapKeyToDir(Event event)
{
}

public int MemoryInfo(int type)
{
}

public int MenuSelect(Event event, ...)
{
}

public k_list NewList()
{
}

public k_node NewNode(var value, int key)
{
}

public k_window NewWindow(int x, int y, int width, int height, string title, int flags, int priority, int forecolor, int backcolor)
{
}

public k_node NextNode(k_node pNode)
{
}

public var NodeValue(k_node node)
{
}

/**
	Returns the number of cels of the view resource specified by
	the view property of the object passed in.
 */
public
int NumCels(View view)
int NumCels(DIcon view)
{
}

public int NumLoops(View view)
{
}

public
int OnControl(int map, int x, int y)
int OnControl(int map, int x, int y, int width, int height)
{
}


public bool Parse(string text, Event event)
{
}

public int PicNotValid()
//int PicNotValid(int newFlag)
{
}

public k_node PrevNode(k_node node)
{
}

public void Profiler()
{
}

public int Random(int min, int max)
{
}

public int ReadNumber(string text)
{
}

public bool RespondsTo(Obj obj, selector aSelector)
{
}

public void RestartGame()
{
}

public void RestoreGame(string gameName, int slotNumber, string gameVerison)
{
}





/*
    Checks to see if the specified string matches the last line parsed.
    
    Parameters:
    saidString - the string to match.

    Said operators:
    The following operators can be used in a said string.

    , - "OR", Used to specify alternatives to words, such as "take,get".
    / - Sentence part separator.  Only two of these tokens may be used,
        since sentences are split into a maximum of three parts.
    ( - Used together with ')' for grouping.
    ) - See '('.
    [ - Used together with ']' for optional grouping. "[a]" means "either a or nothing"
    ] - See '['
    < - Semantic reference operator (as in 'get<up')
    > - Instructs Said() not to claim the event passed to the previous Parse() call on
        a match.  Used for successive matching.

    Returns:
    true if the string matches, false otherwise.

    Remarks:
    If a match is made, the words are "used up" until a fresh parse event happens.
    For example

    [code]
    if (Said('look'))
    {
    }
    if (Said('look')) // This will return false, even if the previous line returned true.
    {
        // We can never get here.
    }
    [/code]


    Examples:
    [code]
    Said('look/car')         // Matches "look car", "look in car"
    Said('look<in/car')      // Matches "look in car" only
    Said('give/food/dog')    // Matches "give food to dog" and "give dog food"
    [/code]
 */
public bool Said(said_string saidString)
{
}


public bool SaveGame(string gameName, int slotNumber, string description, string gameVersion)
{
}

public
var ScriptID(int scriptNum, int index)
var ScriptID(int scriptNum)
{
}

/*
	Changes the mouse cursor, or shows and hides it.
	
	Parameters:
	resourceNumber - number of the cursor resource to use.
	visible - if true, the cursor is shown.  Otherwise, it is hidden.
	x - x position at which to place the cursor.
	y - y position at which to place the cursor.
 */
public
void SetCursor(int resourceNumber)
void SetCursor(int resourceNumber, bool visible)
void SetCursor(int resourceNumber, bool visible, int x, int y)
{
}

/*
	Halts the game execution and starts the game debugger.
	From there, you can step through the execution of your game and inspect memory.
	
	Type '?' in the debugger to see the list of commands.
	
	See Also:
	<StackInfo>, <InspectObj>, <ShowObjs>, <ShowFree>, <ShowSends>, <MemoryInfo>
 */
public void SetDebug()
{
}

/*
	Sets up the jump mover object's xStep and yStep properties.
 */
public void SetJump(Motion mover, int dx, int dy, int gy)
{
}

public
void SetMenu(int menuItem, int subFunction, string menuItemText)
void SetMenu(int menuItem, selector subFunction, string menuItemText)
void SetMenu(int menuItem, int subFunction, said_string menuItemSaid)
void SetMenu(int menuItem, int subFunction, int key)
void SetMenu(int menuItem, int subFunction, bool enable)
{
}

/*
	Makes the view visible on the screen.

	It looks up the view object's x and y properties,
	as well as the view/cel/loop to determine it's width and height,
	then sets it's nsLeft, nsTop, nsRight and nsBottom properties accordingly. 
 */
public void SetNowSeen(View view)
{
}

/*
	Sets the current port to the specified one.
 */
public void SetPort(k_window newPort)
{
}

/*
	Examines the scripts pointed to by the objects in the specified set (by their script property).
	If they have any synonyms, it enables them.
	
	This is handled automatically by the <Rm> and <Rgn> classes.
 */
public void SetSynonyms(Set scripts)
{
}

/*
	Shakes the screen a number of times.
	
	If the direction parameter is given, it shakes the specified direction. If it is not, it shakes from left to right.

	direction:
	The direction can be one of the following values defined in sci.shp.
	ssLEFTRIGHT - shakes from left to right.
	ssUPDOWN - shakes up and down.
	ssFULL_SHAKE - shakes the screen diagonally from the top left corner to the bottom right.
	
	Example:
	[code]
	ShakeScreen(8);				// Does a left to right shake screen eight times
	ShakeScreen(20 ssFULL_SHAKE); // Does a complete shake screen twenty times
	[/code]
 */
public void ShakeScreen(int shakeCount)
//void ShakeScreen(int shakeCount, int direction)
{
}

/*
	Shows the visual, priority or control screen.
	
	The screen parameter can take one following values, defined in sci.shp
	
	- VISUAL
	- PRIORITY
	- CONTROL
	
	Remarks:
	This can be useful for debugging your game.
	
	Sets bit 1 of the picNotValid flag, making the picture "showable".
	The picNotValid flag is used by other functions to determine whether or not the background picture is considered valid.	
 */
public void Show(int screen)
{
}

/*
	Shows a debug window showing the amount of free heap.
	
	Part of the Sierra debugger.

	See Also:
	<StackInfo>, <SetDebug>, <InspectObj>, <ShowSends>, <ShowObjs>, <MemoryInfo>
 */
public void ShowFree()
{
}

/*
	Shows a debug window showing all of classes and instances currently in memory.
	
	Part of the Sierra debugger.

	See Also:
	<StackInfo>, <SetDebug>, <InspectObj>, <ShowSends>, <ShowFree>, <MemoryInfo>
 */
public void ShowObjs()
{
}

/*
	Shows a debug window showing all of the methods which have been called by send, but not yet finished.
	
	Part of the Sierra debugger.

	See Also:
	<StackInfo>, <SetDebug>, <InspectObj>, <ShowObjs>, <ShowFree>, <MemoryInfo>
 */
public void ShowSends()
{
}

/*
	Returns the factor divided by the sine of angle * PI / 180.0.

	See Also:
	<CosDiv>, <CosMult>, <SinMult>
 */
public int SinDiv(int angle, int factor)
{
}

/*
	Returns the sine of angle * PI / 180.0 multiplied by factor.

	See Also:
	<CosDiv>, <CosMult>, <SinDiv>
 */
public int SinMult(int angle, int factor)
{
}

/*
	Calculates the square root of the given number and returns it.
 */
public int Sqrt(int value)
{
}

/*
	Returns the amount of current stack usage.
	
	See Also:
	<SetDebug>, <InspectObj>, <ShowSends>, <ShowObjs>, <ShowFree>, <MemoryInfo>
 */
public int StackUsage()
{
}

public
char StrAt(string aString, int index)
char StrAt(string aString, int index, char replacement)
{
}

public string StrCat(string dest, string src)
{
}

public int StrCmp(string a, string b)
//int StrCmp(string a, string b, int maxChars)
{
}


public string StrCpy(string dest, string src)
//string StrCpy(string dest, string src, int maxChars)
{
}

public string StrEnd(string text)
{
}

public int StrLen(string text)
{
}

public
void TextSize(pointer rect, string text, int font)
void TextSize(pointer rect, string text, int font, int maxLength)
{
}

public void UnLoad(int resourceType, int resourceNum)
{
}

public bool ValidPath(string directory)
{
}

public int Wait(int ticks)
{
}



